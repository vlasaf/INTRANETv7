"""
Main application file for HEXACO Telegram Bot.
"""

import sys
import os

# Add the project root's parent directory to sys.path to allow absolute imports like 'from hexaco_bot.config...'
# os.path.dirname(__file__) is C:\–ø—Ä–æ–µ–∫—Ç—ã\INTRANETv4\hexaco_bot\src
# os.path.join(os.path.dirname(__file__), '..') is C:\–ø—Ä–æ–µ–∫—Ç—ã\INTRANETv4\hexaco_bot
# os.path.join(os.path.dirname(__file__), '..', '..') is C:\–ø—Ä–æ–µ–∫—Ç—ã\INTRANETv4
project_grandparent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_grandparent_dir not in sys.path:
    sys.path.insert(0, project_grandparent_dir)

import logging
import threading
import time
from telebot import TeleBot
from telebot.types import Message

from hexaco_bot.config.settings import BOT_TOKEN, LOG_LEVEL, LOG_FILE
from hexaco_bot.src.data.database import DatabaseManager
from hexaco_bot.src.handlers.start_handler import (
    StartHandler, 
    STATE_GENDER_SELECTION, 
    STATE_NAME_INPUT, 
    STATE_AWAIT_PAEI, 
    STATE_AWAIT_MBTI, 
    STATE_INITIAL_SETUP_COMPLETE
)
from hexaco_bot.src.handlers.question_handler import QuestionHandler
from hexaco_bot.src.session.session_manager import SessionManager

# Import report watcher for psychoprofile generation
# from hexaco_bot.src.psychoprofile.report_watcher import start_watching_background  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û

# Configure logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class HEXACOBot:
    """Main HEXACO Telegram Bot class."""
    
    def __init__(self):
        """Initialize bot with handlers and database."""
        self.bot = TeleBot(BOT_TOKEN)
        self.db = DatabaseManager()
        self.session_manager = SessionManager(self.db)
        self.start_handler = StartHandler(self.bot, self.db, self.session_manager)
        self.question_handler = QuestionHandler(self.bot, self.db, self.session_manager)
        
        # Initialize database
        if not self.db.initialize_database():
            logger.error("Failed to initialize database")
            sys.exit(1)
        
        # Start file system watcher in background thread
        self._start_file_watcher()
        
        # Register handlers
        self._register_handlers()
        
        logger.info("HEXACO Bot initialized successfully")
    
    def _safe_answer_callback_query(self, call_id: str, text: str = "") -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        try:
            self.bot.answer_callback_query(call_id, text)
            return True
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback
            logger.warning(f"Failed to answer callback query {call_id}: {e}")
            return False
    
    def _start_file_watcher(self):
        """Start the file system watcher for automatic psychoprofile generation."""
        try:
            # Start watcher in daemon thread so it stops when main program stops
            watcher_thread = threading.Thread(
                target=self._run_file_watcher,
                daemon=True
            )
            watcher_thread.start()
            logger.info("File system watcher started successfully")
        except Exception as e:
            logger.error(f"Failed to start file system watcher: {e}")
    
    def _run_file_watcher(self):
        """Run the file system watcher."""
        try:
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            # Use absolute paths to ensure they work from any working directory
            base_dir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))  # Go up to project root
            reports_dir = os.path.join(base_dir, "hexaco_bot", "user_reports")
            profiles_dir = os.path.join(base_dir, "hexaco_bot", "user_profile")
            
            # self.file_observer = start_watching_background(reports_dir, profiles_dir)
            logger.info(f"File watcher is temporarily disabled. Reports dir: {reports_dir}, Profiles dir: {profiles_dir}")
        except Exception as e:
            logger.error(f"Error in file watcher: {e}")
    
    def _register_handlers(self):
        """Register all bot message handlers."""
        
        # Start command handler
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: Message):
            user_id = message.from_user.id
            user_data = self.db.get_user(user_id)
            session = self.session_manager.get_or_create_session(user_id)

            if user_data:
                # Existing user
                if not user_data.get('paei_index'):
                    logger.info(f"User {user_id} exists, starting PAEI input.")
                    self.start_handler.ask_paei_index(message)
                elif not user_data.get('mbti_type'):
                    logger.info(f"User {user_id} has PAEI, starting MBTI input.")
                    self.start_handler.ask_mbti_type(message)
                else:
                    logger.info(f"User {user_id} has PAEI and MBTI, showing test menu.")
                    # Ensure state is appropriate for showing menu, e.g. initial_setup_complete
                    self.session_manager.update_session_state(user_id, STATE_INITIAL_SETUP_COMPLETE)
                    self.question_handler.show_test_menu(message)
            else:
                # New user - registration flow handled by StartHandler
                logger.info(f"New user {user_id}, starting registration flow.")
                self.start_handler.handle_start_command(message)
        
        # Test command handler
        @self.bot.message_handler(commands=['test'])
        def handle_test(message: Message):
            self.question_handler.start_test_for_user(message)
        
        # Results command handler
        @self.bot.message_handler(commands=['results'])
        def handle_results(message: Message):
            user_id = message.from_user.id
            results = self.db.get_user_results(user_id)
            
            if not results:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /test"
                )
                return
            
            # Show latest result
            latest_result = results[0]
            from hexaco_bot.src.scoring.hexaco_scorer import HEXACOScorer
            scorer = HEXACOScorer()
            
            scores = {
                'H': latest_result['honesty_humility'],
                'E': latest_result['emotionality'],
                'X': latest_result['extraversion'],
                'A': latest_result['agreeableness'],
                'C': latest_result['conscientiousness'],
                'O': latest_result['openness'],
                'Alt': latest_result['altruism']
            }
            
            user_data = self.db.get_user(user_id)
            user_name = f"{user_data['first_name']} {user_data['last_name']}"
            
            results_message = scorer.format_results_message(scores, user_name)
            results_message += f"\n\nüìÖ –î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {latest_result['created_at']}"
            results_message += f"\nüìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}"
            
            self.bot.send_message(message.chat.id, results_message, parse_mode='Markdown')
        
        # Help command handler
        @self.bot.message_handler(commands=['help'])
        def handle_help(message: Message):
            help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ HEXACO –ë–æ—Ç—É**

ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
/test - –ü—Ä–æ–π—Ç–∏ HEXACO —Ç–µ—Å—Ç
/results - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ **–û —Ç–µ—Å—Ç–µ HEXACO:**
–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏, –∏–∑–º–µ—Ä—è—é—â–∞—è 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:

ü§ù **–ß–µ—Å—Ç–Ω–æ—Å—Ç—å-–°–º–∏—Ä–µ–Ω–∏–µ** - —á–µ—Å—Ç–Ω–æ—Å—Ç—å, –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å
üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å** - —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
üéâ **–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è** - –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å
ü§ó **–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - —Ç–µ—Ä–ø–µ–Ω–∏–µ, –ø—Ä–æ—â–µ–Ω–∏–µ, –º—è–≥–∫–æ—Å—Ç—å
üìã **–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å** - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
üé® **–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É** - –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å

‚ûï **–ê–ª—å—Ç—Ä—É–∏–∑–º** - –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º

üìù **–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å:**
‚Ä¢ 100 –≤–æ–ø—Ä–æ—Å–æ–≤, ~15-20 –º–∏–Ω—É—Ç
‚Ä¢ –®–∫–∞–ª–∞ –æ—Ç 1 –¥–æ 5 (–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω ‚Üí —Å–æ–≥–ª–∞—Å–µ–Ω)
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

üí° **–ü–æ–º–Ω–∏—Ç–µ:** –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!
            """
            
            self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
        
        # Default message handler
        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message: Message):
            user_id = message.from_user.id
            session = self.session_manager.get_session(user_id)
            
            if session:
                # Let StartHandler manage its states first (gender, name, paei)
                # MBTI is callback, so not handled by default message handler
                if session.state in [STATE_GENDER_SELECTION, 
                                     STATE_NAME_INPUT, 
                                     STATE_AWAIT_PAEI]:
                    self.start_handler.handle_default_message(message)
                # Check if a test is active (QuestionHandler might set a specific state like 'testing')
                elif self.question_handler.is_test_active(user_id): 
                    # User is in a test, all answers are expected via callbacks.
                    # Remind them to use buttons if they send text.
                    self.bot.send_message(message.chat.id, 
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞. "
                                          "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç, —ç—Ç–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, "
                                          "–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω).")
                else:
                    # Default response if no specific handler took over
                    self.bot.send_message(
                        message.chat.id,
                        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–∞—á–∞—Ç—å\n"
                        "/results - –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
                    )
            else:
                # No session, user is likely new or session expired
                self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        
        # Callback query handler for MBTI buttons
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):  # call is telebot.types.CallbackQuery
            user_id = call.from_user.id
            session = self.session_manager.get_session(user_id)
            
            if session and session.state == STATE_AWAIT_MBTI:
                self.start_handler.handle_mbti_callback(call, self.question_handler.show_test_menu)
            else:
                # It's good practice to answer all callbacks, even if not handled
                self._safe_answer_callback_query(call.id)
                logger.debug(f"Unhandled callback query for user {user_id}, state: {session.state if session else 'No session'}")
        
        logger.info("Bot handlers registered")
    
    def run(self):
        """Start bot polling."""
        try:
            logger.info("Starting HEXACO Bot...")
            self.bot.infinity_polling(none_stop=True)
        except Exception as e:
            logger.error(f"Bot polling error: {e}")
            raise

def main():
    """Main entry point."""
    try:
        bot = HEXACOBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot startup error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 