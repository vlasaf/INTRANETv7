"""
Handles scoring for the Self-Efficacy Test.
"""
import json
from typing import Dict, Any

class SelfEfficacyScorer:
    """Calculates and interprets Self-Efficacy Test scores."""

    # Items to be reversed (sign changed)
    REVERSE_CODED_ITEMS = [2, 4, 5, 6, 7, 10, 11, 12, 16, 17, 18, 20, 22]
    # Q14: "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º." - positive, no reverse needed.

    # Items for General Self-Efficacy (GSE)
    GSE_ITEMS = list(range(1, 18))  # 1-17
    # Items for Social Self-Efficacy (SSE)
    SSE_ITEMS = list(range(18, 24)) # 18-23

    def calculate_scores(self, responses: Dict[int, int]) -> Dict[str, Any]:
        """
        Calculates Self-Efficacy scores.
        Args:
            responses: A dictionary of question numbers (1-23) to scores (-5 to +5).
        Returns:
            A dictionary containing scores for GSE and SSE scales.
        """
        if not responses or len(responses) != 23:
            return {"error": "–ù–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ 23 –≤–æ–ø—Ä–æ—Å–∞ –¢–µ—Å—Ç–∞ —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."}

        processed_responses = {}
        for item_num, score in responses.items():
            if item_num in self.REVERSE_CODED_ITEMS:
                processed_responses[item_num] = -score
            else:
                processed_responses[item_num] = score
        
        gse_score = 0
        for item_num in self.GSE_ITEMS:
            gse_score += processed_responses.get(item_num, 0)
        
        sse_score = 0
        for item_num in self.SSE_ITEMS:
            sse_score += processed_responses.get(item_num, 0)

        # GSE range: 17 items * (-5 to +5) = -85 to +85
        # SSE range: 6 items * (-5 to +5) = -30 to +30
        return {
            "scores": {
                "–û–±—â–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–û–°–≠)": gse_score,
                "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–°–°–≠)": sse_score
            },
            "interpretation_notes": {
                "GSE_range": "-85 –¥–æ +85",
                "SSE_range": "-30 –¥–æ +30"
            }
        }

    def format_self_efficacy_results_message(self, scores_data: Dict[str, Any], user_name: str) -> str:
        """
        Formats the Self-Efficacy Test results into a user-friendly message.
        """
        if "error" in scores_data:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–µ—Å—Ç–∞ —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {scores_data['error']}"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ user_name
        escaped_user_name = user_name
        for char_to_escape in ['_', '*', '`', '[', ']']:
            escaped_user_name = escaped_user_name.replace(char_to_escape, f'\\{char_to_escape}')

        scores = scores_data.get("scores", {})
        notes = scores_data.get("interpretation_notes", {})
        gse_score = scores.get("–û–±—â–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–û–°–≠)", 0)
        sse_score = scores.get("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–°–°–≠)", 0)

        message = f"üë§ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–∞ —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {escaped_user_name}**\n\n"
        message += "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–∞—à—É –≤–µ—Ä—É –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.\n\n"
        
        message += f"‚Ä¢ **–û–±—â–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–û–°–≠):** {gse_score} –±–∞–ª–ª–æ–≤ (–î–∏–∞–ø–∞–∑–æ–Ω: {notes.get('GSE_range', 'N/A')})\n"
        message += f"‚Ä¢ **–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–°–°–≠):** {sse_score} –±–∞–ª–ª–æ–≤ (–î–∏–∞–ø–∞–∑–æ–Ω: {notes.get('SSE_range', 'N/A')})\n\n"
        
        message += "**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**\n"
        message += "- **–û–±—â–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–û–°–≠)** –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —à–∏—Ä–æ–∫–æ–º —Å–ø–µ–∫—Ç—Ä–µ —Å–∏—Ç—É–∞—Ü–∏–π.\n"
        message += "- **–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–°–°–≠)** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏.\n"
        message += "- **–í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è** –ø–æ –æ–±–µ–∏–º —à–∫–∞–ª–∞–º —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–∏–ª—å–Ω—É—é –≤–µ—Ä—É –≤ —Å–≤–æ–∏ —Å–∏–ª—ã –∫–∞–∫ –≤ –æ–±—â–∏—Ö –¥–µ–ª–∞—Ö, —Ç–∞–∫ –∏ –≤ –æ–±—â–µ–Ω–∏–∏.\n"
        message += "- **–ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è** –º–æ–≥—É—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞—Ç—å –æ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –∏–∑–±–µ–≥–∞–Ω–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö.\n"
        message += "- **–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø–∏—á–Ω–æ–º—É —É—Ä–æ–≤–Ω—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π.\n"

        return message

    def responses_to_json(self, responses: Dict[int, int]) -> str:
        """Converts responses dictionary to a JSON string."""
        return json.dumps(responses)

if __name__ == '__main__':
    scorer = SelfEfficacyScorer()
    # Mock responses (23 answers, -5 to +5)
    mock_responses = {
        1: 4, 2: -3, 3: 5, 4: -2, 5: -4, 6: -3, 7: -5, 8: 4, 9: 5, 10: -2,
        11: -3, 12: -4, 13: 5, 14: 4, 15: 4, 16: -3, 17: -2,
        18: -1, 19: 3, 20: -2, 21: 2, 22: -3, 23: 3 
    }
    
    calculated_scores = scorer.calculate_scores(mock_responses)
    print("\nCalculated Scores Data (Self-Efficacy):")
    print(json.dumps(calculated_scores, indent=2, ensure_ascii=False))

    if "error" not in calculated_scores:
        results_message = scorer.format_self_efficacy_results_message(calculated_scores, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print("\nFormatted Self-Efficacy Results Message:")
        print(results_message)
    else:
        print(f"Error: {calculated_scores['error']}") 