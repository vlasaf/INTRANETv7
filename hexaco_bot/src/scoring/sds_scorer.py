"""
–õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (SDS-12).
"""
from typing import Dict, Tuple

class SDSScorer:
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        self.autonomous_choices = {
            1: "A", 2: "B", 3: "A", 4: "B", 5: "A", 6: "A",
            7: "B", 8: "A", 9: "B", 10: "B", 11: "A", 12: "B"
        }

    def _get_score_for_item(self, item_id: int, response_value: int) -> int:
        """–ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–ª–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–æ—Ç -2 –¥–æ +2)."""
        # response_value: 1 (–¢–æ–ª—å–∫–æ –ê) ... 5 (–¢–æ–ª—å–∫–æ –ë)
        # autonomous_choice: "A" –∏–ª–∏ "B"
        
        is_autonomous_A = self.autonomous_choices[item_id] == "A"
        
        if is_autonomous_A:
            # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –≤—ã–±–æ—Ä - –ê. –û—Ç–≤–µ—Ç—ã 1, 2 - –∫ –ê; 4, 5 - –∫ –ë.
            if response_value == 1: return 2  # –¢–æ–ª—å–∫–æ –ê (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)
            if response_value == 2: return 1  # –°–∫–æ—Ä–µ–µ –ê (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)
            if response_value == 3: return 0  # –û–±–∞
            if response_value == 4: return -1 # –°–∫–æ—Ä–µ–µ –ë (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π)
            if response_value == 5: return -2 # –¢–æ–ª—å–∫–æ –ë (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π)
        else:
            # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –≤—ã–±–æ—Ä - –ë. –û—Ç–≤–µ—Ç—ã 4, 5 - –∫ –ë; 1, 2 - –∫ –ê.
            if response_value == 1: return -2 # –¢–æ–ª—å–∫–æ –ê (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π)
            if response_value == 2: return -1 # –°–∫–æ—Ä–µ–µ –ê (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π)
            if response_value == 3: return 0  # –û–±–∞
            if response_value == 4: return 1  # –°–∫–æ—Ä–µ–µ –ë (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)
            if response_value == 5: return 2  # –¢–æ–ª—å–∫–æ –ë (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)
        return 0 # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

    def calculate_scores(self, responses: Dict[int, int]) -> Dict[str, float]:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—à–∫–∞–ª—ã –∏ –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å SDS."""
        item_scores = {}
        for item_id, response_value in responses.items():
            if item_id in self.autonomous_choices:
                item_scores[item_id] = self._get_score_for_item(item_id, response_value)
        
        self_contact_items = [1, 2, 3, 4, 5]
        choiceful_action_items = [6, 7, 8, 9, 10, 11, 12]
        
        self_contact_score = 0
        sc_count = 0
        for item in self_contact_items:
            if item in item_scores:
                self_contact_score += item_scores[item]
                sc_count += 1
        
        choiceful_action_score = 0
        ca_count = 0
        for item in choiceful_action_items:
            if item in item_scores:
                choiceful_action_score += item_scores[item]
                ca_count += 1
                
        avg_self_contact = (self_contact_score / sc_count) if sc_count > 0 else 0
        avg_choiceful_action = (choiceful_action_score / ca_count) if ca_count > 0 else 0
        
        sds_index = (avg_self_contact + avg_choiceful_action) / 2
        
        return {
            "self_contact": round(avg_self_contact, 2),
            "choiceful_action": round(avg_choiceful_action, 2),
            "sds_index": round(sds_index, 2)
        }

    def interpret_sds_index(self, sds_index: float) -> str:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å SDS."""
        if sds_index <= -0.5:
            return "–ù–∏–∑–∫–∞—è —Å–∞–º–æ–¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏—è (–≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å)"
        elif -0.4 <= sds_index <= 0.4:
            return "–°–º–µ—à–∞–Ω–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"
        else: # >= 0.5
            return "–í—ã—Å–æ–∫–∞—è —Å–∞–º–æ–¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏—è (–¥–µ–π—Å—Ç–≤—É—é –≤ —Å–æ–≥–ª–∞—Å–∏–∏ —Å —Å–æ–±–æ–π)"

    def interpret_subscales(self, self_contact: float, choiceful_action: float) -> Tuple[str, str]:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—à–∫–∞–ª—ã."""
        sc_interpretation = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π Self-Contact (–∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π)"
        if self_contact < -0.4: # –£—Å–ª–æ–≤–Ω—ã–π –ø–æ—Ä–æ–≥, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            sc_interpretation = "–ù–∏–∑–∫–∏–π Self-Contact (—á–µ–ª–æ–≤–µ–∫ ¬´–Ω–µ —Å–ª—ã—à–∏—Ç —Å–µ–±—è¬ª)"
        elif self_contact > 0.4:
            sc_interpretation = "–í—ã—Å–æ–∫–∏–π Self-Contact (—Ö–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π)"
            
        ca_interpretation = "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ Choiceful Action (–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ-—Å–≤–æ–µ–º—É)"
        if choiceful_action < -0.4:
            ca_interpretation = "–ù–∏–∑–∫–æ–µ Choiceful Action (¬´—Å–ª—ã—à—É, –Ω–æ –Ω–µ –¥–µ–ª–∞—é¬ª)"
        elif choiceful_action > 0.4:
            ca_interpretation = "–í—ã—Å–æ–∫–æ–µ Choiceful Action (–∞–∫—Ç–∏–≤–Ω–æ –¥–µ–π—Å—Ç–≤—É—é –ø–æ-—Å–≤–æ–µ–º—É)"
            
        return sc_interpretation, ca_interpretation

    def format_sds_results_message(self, scores: Dict[str, float], user_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ SDS."""
        sds_index_interpretation = self.interpret_sds_index(scores['sds_index'])
        sc_interp, ca_interp = self.interpret_subscales(scores['self_contact'], scores['choiceful_action'])
        
        message = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–∞ –°–∞–º–æ–¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (SDS) –¥–ª—è {user_name}**\n\n"
        message += f"üîπ **–û–±—â–∏–π –ò–Ω–¥–µ–∫—Å –°–∞–º–æ–¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (SDS Index): {scores['sds_index']:.2f}**\n"
        message += f"   *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:* {sds_index_interpretation}\n\n"
        message += f"üî∏ **–ü–æ–¥—à–∫–∞–ª–∞ '–ö–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π' (Self-Contact): {scores['self_contact']:.2f}**\n"
        message += f"   *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:* {sc_interp}\n\n"
        message += f"üî∏ **–ü–æ–¥—à–∫–∞–ª–∞ '–û—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' (Choiceful Action): {scores['choiceful_action']:.2f}**\n"
        message += f"   *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:* {ca_interp}\n\n"
        message += "üí° *–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ö–æ–¥—è—Ç –∏–∑ –≤–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–±–µ–∂–¥–µ–Ω–∏–π –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π, –∞ –Ω–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è.*"
        return message
    
    def responses_to_json(self, responses: Dict[int, int]) -> str:
        import json
        return json.dumps(responses) 