"""
Contains the PID5BFMScorer class for calculating PID-5-BF+M test scores.
"""
import json
from typing import Dict, Any

class PID5BFMScorer:
    """Calculates scores for the PID-5-BF+M test."""

    def __init__(self):
        # –ú–∞—Ç—Ä–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å ‚Üí —Ñ–∞—Å–µ—Ç ‚Üí –¥–æ–º–µ–Ω
        self.domain_structure = {
            "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π_–∞—Ñ—Ñ–µ–∫—Ç": {
                "–≠–º–æ—Ü_–ª–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": [1, 19],
                "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å": [7, 25], 
                "–°—Ç—Ä–∞—Ö_—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è": [13, 31]
            },
            "–û—Ç—á—É–∂–¥–µ–Ω–∏–µ": {
                "–û—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ": [4, 22],
                "Anhedonia": [10, 28],
                "–ò–∑–±–µ–≥–∞–Ω–∏–µ_–±–ª–∏–∑–æ—Å—Ç–∏": [16, 34]
            },
            "–ê–Ω—Ç–∞–≥–æ–Ω–∏–∑–º": {
                "–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—å": [2, 20],
                "–õ–∂–∏–≤–æ—Å—Ç—å": [8, 26],
                "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å": [14, 32]
            },
            "–î–∏–∑–∏–Ω–≥–∏–±–∏—Ü–∏—è": {
                "–ë–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å": [3, 21],
                "–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å": [9, 27],
                "–û—Ç–≤–ª–µ–∫–∞–µ–º–æ—Å—Ç—å": [15, 33]
            },
            "–ê–Ω–∞–Ω–∫–∞—Å—Ç–∏—è": {
                "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º": [6, 18],
                "–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å": [12, 24],
                "–û–¥–µ—Ä–ª–∏–Ω–æ—Å—Ç—å": [30, 36]
            },
            "–ü—Å–∏—Ö–æ—Ç–∏—Ü–∏–∑–º": {
                "–ù–µ–æ–±—ã—á–Ω—ã–µ_—É–±–µ–∂–¥–µ–Ω–∏—è": [5, 23],
                "–≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω–æ—Å—Ç—å": [11, 29],
                "–ü–µ—Ä—Ü–µ–ø—Ç_–¥–∏—Å—Ä–µ–≥—É–ª—è—Ü–∏—è": [17, 35]
            }
        }

    def calculate_scores(self, responses: Dict[int, int]) -> Dict[str, Any]:
        """
        Calculates PID-5-BF+M scores with domain calculations.
        """
        # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: 1-4 ‚Üí 0-3
        recoded_responses = {q: response - 1 for q, response in responses.items()}
        
        # –†–∞—Å—á–µ—Ç –¥–æ–º–µ–Ω–æ–≤
        domain_scores = {}
        
        for domain_name, facets in self.domain_structure.items():
            facet_means = []
            
            for facet_name, questions in facets.items():
                # –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ –¥–≤—É–º –≤–æ–ø—Ä–æ—Å–∞–º —Ñ–∞—Å–µ—Ç–∞
                facet_sum = sum(recoded_responses.get(q, 0) for q in questions)
                # –°—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Ñ–∞—Å–µ—Ç–∞ (0-3)
                facet_mean = facet_sum / 2
                facet_means.append(facet_mean)
            
            # –î–æ–º–µ–Ω = —Å—Ä–µ–¥–Ω–µ–µ —Ç—Ä–µ—Ö —Ñ–∞—Å–µ—Ç–æ–≤
            domain_mean = sum(facet_means) / len(facet_means)
            domain_scores[domain_name] = round(domain_mean, 1)
        
        total_score = sum(responses.values())
        
        result = {
            "scores": {
                "total_score": total_score,
                "answered_questions": len(responses),
                **domain_scores
            },
            "raw_responses": responses
        }
        
        return result

    def format_results_message(self, scores_data: Dict[str, Any], user_name: str) -> str:
        """Formats the results into a user-friendly message."""
        scores = scores_data.get("scores", {})
        total_score = scores.get("total_score", "N/A")
        
        message = f"üë§ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ PID-5-BF+M –¥–ª—è {user_name}**\n\n"
        message += "üéØ **–î–æ–º–µ–Ω–Ω—ã–µ —à–∫–∞–ª—ã (0-3):**\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        domains = [
            "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π_–∞—Ñ—Ñ–µ–∫—Ç", "–û—Ç—á—É–∂–¥–µ–Ω–∏–µ", "–ê–Ω—Ç–∞–≥–æ–Ω–∏–∑–º", 
            "–î–∏–∑–∏–Ω–≥–∏–±–∏—Ü–∏—è", "–ê–Ω–∞–Ω–∫–∞—Å—Ç–∏—è", "–ü—Å–∏—Ö–æ—Ç–∏—Ü–∏–∑–º"
        ]
        
        for domain in domains:
            score = scores.get(domain, 0)
            interpretation = self._get_interpretation(score)
            message += f"‚Ä¢ {domain.replace('_', ' ')}: {score} {interpretation}\n"
        
        message += f"\nüìä –°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}\n"
        message += f"üìù –û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {scores.get('answered_questions', 0)}/36\n\n"
        
        message += "üìã **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π:**\n"
        message += "‚Ä¢ 0-0.4: —Ñ–æ–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
        message += "‚Ä¢ 0.5-1.4: –ª–µ–≥–∫–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å\n"
        message += "‚Ä¢ 1.5-2.4: –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ\n"
        message += "‚Ä¢ 2.5-3.0: –≤—ã—Å–æ–∫–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å\n"
        
        return message

    def _get_interpretation(self, score: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è –ø–æ –±–∞–ª–ª—É."""
        if score < 0.5:
            return "üü¢"
        elif score < 1.5:
            return "üü°"
        elif score < 2.5:
            return "üü†"
        else:
            return "üî¥"

    def responses_to_json(self, responses: Dict[int, int]) -> str:
        """Converts responses dictionary to a JSON string."""
        return json.dumps(responses) 