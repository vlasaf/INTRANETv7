"""
HEXACO scoring algorithms and result calculations.
"""

import json
import logging
from typing import Dict, List, Tuple
from collections import defaultdict

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from hexaco_bot.src.data.hexaco_questions import HEXACO_QUESTIONS, FACTORS, get_questions_by_factor

logger = logging.getLogger(__name__)

class HEXACOScorer:
    """Calculates HEXACO personality scores from user responses."""
    
    def __init__(self):
        """Initialize scorer with factor mappings."""
        self.factor_questions = self._build_factor_mappings()
        
    def _build_factor_mappings(self) -> Dict[str, List[Tuple[int, bool]]]:
        """Build mapping of factors to their questions and reverse scoring."""
        mappings = {}
        for factor in FACTORS.keys():
            questions = get_questions_by_factor(factor)
            # Store (question_number, is_reverse_scored) tuples
            mappings[factor] = [(q_num, reverse) for q_num, _, reverse in questions]
        return mappings
    
    def calculate_scores(self, responses: Dict[int, int]) -> Dict[str, float]:
        """
        Calculate HEXACO scores from user responses.
        
        Args:
            responses: Dictionary mapping question numbers (1-100) to responses (1-5)
            
        Returns:
            Dictionary with factor scores (0.0-5.0 scale)
        """
        if len(responses) != 100:
            raise ValueError(f"Expected 100 responses, got {len(responses)}")
        
        scores = {}
        
        for factor, question_data in self.factor_questions.items():
            factor_scores = []
            
            for question_num, is_reverse in question_data:
                if question_num not in responses:
                    raise ValueError(f"Missing response for question {question_num}")
                
                raw_score = responses[question_num]
                
                # Apply reverse scoring if needed
                if is_reverse:
                    # Reverse scale: 1->5, 2->4, 3->3, 4->2, 5->1
                    adjusted_score = 6 - raw_score
                else:
                    adjusted_score = raw_score
                
                factor_scores.append(adjusted_score)
            
            # Calculate mean score for this factor
            mean_score = sum(factor_scores) / len(factor_scores)
            scores[factor] = round(mean_score, 2)
            
            logger.debug(f"Factor {factor}: {len(factor_scores)} items, mean = {mean_score:.2f}")
        
        return scores
    
    def get_score_interpretation(self, scores: Dict[str, float]) -> Dict[str, Dict[str, str]]:
        """
        Get interpretation of HEXACO scores.
        
        Returns:
            Dictionary with factor interpretations including level and description
        """
        interpretations = {}
        
        for factor, score in scores.items():
            level, description = self._interpret_score(factor, score)
            interpretations[factor] = {
                'score': score,
                'level': level,
                'description': description,
                'factor_name': FACTORS[factor]
            }
        
        return interpretations
    
    def _interpret_score(self, factor: str, score: float) -> Tuple[str, str]:
        """Interpret individual factor score."""
        
        # Define score ranges
        if score >= 4.0:
            level = "–í—ã—Å–æ–∫–∏–π"
        elif score >= 3.0:
            level = "–°—Ä–µ–¥–Ω–∏–π"
        else:
            level = "–ù–∏–∑–∫–∏–π"
        
        # Factor-specific descriptions
        descriptions = {
            'H': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã —á–µ—Å—Ç–Ω—ã, –∏—Å–∫—Ä–µ–Ω–Ω–∏, —Å–∫—Ä–æ–º–Ω—ã –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã. –ò–∑–±–µ–≥–∞–µ—Ç–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–º–∏—Ä–µ–Ω–∏—è. –û–±—ã—á–Ω–æ –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Å–∫–ª–æ–Ω–Ω—ã –∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º, —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤—É –∏–ª–∏ –Ω–µ—á–µ—Å—Ç–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é."
            },
            'E': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, —Ç—Ä–µ–≤–æ–∂–Ω—ã, –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–Ω–æ–≥–¥–∞ —Ç—Ä–µ–≤–æ–∂–∏—Ç–µ—Å—å, –Ω–æ –≤ —Ü–µ–ª–æ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã.",
                '–ù–∏–∑–∫–∏–π': "–í—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã, —Å–ø–æ–∫–æ–π–Ω—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –∏ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã."
            },
            'X': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã –æ–±—â–∏—Ç–µ–ª—å–Ω—ã, –∞–∫—Ç–∏–≤–Ω—ã, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã –∏ –ª—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏–∏. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–Ω—ã, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, —Å–ø–æ–∫–æ–π–Ω—ã –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã."
            },
            'A': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã —Ç–µ—Ä–ø–µ–ª–∏–≤—ã, –º–∏—Ä–æ–ª—é–±–∏–≤—ã, –ø—Ä–æ—â–∞—é—â–∏ –∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û–±—ã—á–Ω–æ –≥–æ—Ç–æ–≤—ã –∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏, —É–ø—Ä—è–º—ã–º–∏, —Å–∫–ª–æ–Ω–Ω—ã–º–∏ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º."
            },
            'C': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–¥–µ–∂–Ω—ã –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏. –û–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –Ω–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏, –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–º–∏, —Å–∫–ª–æ–Ω–Ω—ã–º–∏ –∫ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏."
            },
            'O': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã –∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã."
            },
            'Alt': {
                '–í—ã—Å–æ–∫–∏–π': "–í—ã –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–Ω—ã, —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º.",
                '–°—Ä–µ–¥–Ω–∏–π': "–£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ª—å—Ç—Ä—É–∏–∑–º–∞. –ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç–µ –¥—Ä—É–≥–∏–º.",
                '–ù–∏–∑–∫–∏–π': "–í—ã –±–æ–ª—å—à–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ —Å–µ–±–µ, –º–µ–Ω–µ–µ —Å–∫–ª–æ–Ω–Ω—ã –∫ –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é."
            }
        }
        
        return level, descriptions[factor][level]
    
    def format_results_message(self, scores: Dict[str, float], user_name: str) -> str:
        """Format HEXACO results as a readable message."""
        
        interpretations = self.get_score_interpretation(scores)
        
        message = f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HEXACO —Ç–µ—Å—Ç–∞ –¥–ª—è {user_name}\n\n"
        
        # Factor order for display
        factor_order = ['H', 'E', 'X', 'A', 'C', 'O', 'Alt']
        
        for factor in factor_order:
            if factor in interpretations:
                interp = interpretations[factor]
                emoji = self._get_factor_emoji(factor)
                
                message += f"{emoji} **{interp['factor_name']}**: {interp['score']}/5.0 ({interp['level']})\n"
                message += f"   {interp['description']}\n\n"
        
        message += "üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n"
        message += "‚Ä¢ –í—ã—Å–æ–∫–∏–π (4.0+): –Ø—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —á–µ—Ä—Ç–∞\n"
        message += "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π (3.0-3.9): –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å\n"
        message += "‚Ä¢ –ù–∏–∑–∫–∏–π (<3.0): –°–ª–∞–±–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —á–µ—Ä—Ç–∞\n\n"
        message += "üí° –ü–æ–º–Ω–∏—Ç–µ: –Ω–µ—Ç '—Ö–æ—Ä–æ—à–∏—Ö' –∏–ª–∏ '–ø–ª–æ—Ö–∏—Ö' —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —ç—Ç–æ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!"
        
        return message
    
    def _get_factor_emoji(self, factor: str) -> str:
        """Get emoji for factor display."""
        emojis = {
            'H': 'ü§ù',  # Honesty-Humility
            'E': 'üí≠',  # Emotionality
            'X': 'üéâ',  # Extraversion
            'A': 'ü§ó',  # Agreeableness
            'C': 'üìã',  # Conscientiousness
            'O': 'üé®',  # Openness
            'Alt': '‚ù§Ô∏è'  # Altruism
        }
        return emojis.get(factor, 'üìä')
    
    def validate_responses(self, responses: Dict[int, int]) -> List[str]:
        """Validate user responses and return list of errors."""
        errors = []
        
        # Check total count
        if len(responses) != 100:
            errors.append(f"Expected 100 responses, got {len(responses)}")
        
        # Check question numbers
        for q_num in range(1, 101):
            if q_num not in responses:
                errors.append(f"Missing response for question {q_num}")
        
        # Check response values
        for q_num, response in responses.items():
            if not isinstance(response, int) or response < 1 or response > 5:
                errors.append(f"Invalid response for question {q_num}: {response} (must be 1-5)")
        
        return errors
    
    def responses_to_json(self, responses: Dict[int, int]) -> str:
        """Convert responses dictionary to JSON string."""
        return json.dumps(responses, sort_keys=True)
    
    def responses_from_json(self, json_str: str) -> Dict[int, int]:
        """Convert JSON string back to responses dictionary."""
        data = json.loads(json_str)
        # Ensure keys are integers
        return {int(k): int(v) for k, v in data.items()} 