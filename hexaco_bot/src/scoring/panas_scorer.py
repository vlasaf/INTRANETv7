"""
Handles scoring for the PANAS (Positive and Negative Affect Schedule).
"""
import json
from typing import Dict, Any

class PanasScorer:
    """Calculates and interprets PANAS scores."""

    # Item numbers for Positive Affect (PA) and Negative Affect (NA) scales
    # Q14 ("–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω—ã–π") is currently excluded from PA as per initial logic.
    # It can be added if specified: self.PA_ITEMS = [1, 4, 5, 9, 10, 11, 14, 17, 18, 19]
    PA_ITEMS = [1, 4, 5, 9, 10, 11, 17, 18, 19]
    NA_ITEMS = [2, 3, 6, 7, 8, 12, 13, 15, 16, 20]

    def calculate_scores(self, responses: Dict[int, int]) -> Dict[str, Any]:
        """
        Calculates PANAS scores.
        Args:
            responses: A dictionary of question numbers (1-20) to scores (1-5).
        Returns:
            A dictionary containing scores for PA and NA scales.
        """
        if not responses or len(responses) != 20:
            return {"error": "–ù–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –®–ü–ê–ù–ê."}

        pa_score = 0
        for item_num in self.PA_ITEMS:
            pa_score += responses.get(item_num, 0)

        na_score = 0
        for item_num in self.NA_ITEMS:
            na_score += responses.get(item_num, 0)

        return {
            "scores": {
                "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ü–ê)": pa_score,
                "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ù–ê)": na_score
            },
            "interpretation_notes": {
                "PA_range": "9 - 45" if 14 not in self.PA_ITEMS else "10 - 50", # Recalculate if Q14 added
                "NA_range": "10 - 50"
            }
        }

    def format_panas_results_message(self, scores_data: Dict[str, Any], user_name: str) -> str:
        """
        Formats the PANAS results into a user-friendly message.
        """
        if "error" in scores_data:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –®–ü–ê–ù–ê: {scores_data['error']}"

        scores = scores_data.get("scores", {})
        notes = scores_data.get("interpretation_notes", {})
        pa_score = scores.get("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ü–ê)", 0)
        na_score = scores.get("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ù–ê)", 0)

        message = f"üë§ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –®–∫–∞–ª—ã –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—Ñ—Ñ–µ–∫—Ç–∞ (–®–ü–ê–ù–ê) –¥–ª—è {user_name}**\n\n"
        message += "–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å.\n\n"
        
        message += f"‚Ä¢ **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ü–ê):** {pa_score} –±–∞–ª–ª–æ–≤ (–î–∏–∞–ø–∞–∑–æ–Ω: {notes.get('PA_range', 'N/A')})\n"
        message += f"‚Ä¢ **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∞—Ñ—Ñ–µ–∫—Ç (–ù–ê):** {na_score} –±–∞–ª–ª–æ–≤ (–î–∏–∞–ø–∞–∑–æ–Ω: {notes.get('NA_range', 'N/A')})\n\n"
        
        message += "**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**\n"
        message += "- **–í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã –ø–æ —à–∫–∞–ª–µ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∞—Ñ—Ñ–µ–∫—Ç–∞ (–ü–ê)** –æ–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å –æ—â—É—â–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—è –∏ —Ä–∞–¥–æ—Å—Ç–Ω–æ–≥–æ –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏—è.\n"
        message += "- **–í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã –ø–æ —à–∫–∞–ª–µ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—Ñ—Ñ–µ–∫—Ç–∞ (–ù–ê)** –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–µ—Å—Å–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.\n"
        message += "- **–ù–∏–∑–∫–∏–µ –±–∞–ª–ª—ã –ø–æ –ü–ê** –º–æ–≥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å –∞–ø–∞—Ç–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞.\n"
        message += "- **–ù–∏–∑–∫–∏–µ –±–∞–ª–ª—ã –ø–æ –ù–ê** –æ–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ –±–µ–∑–º—è—Ç–µ–∂–Ω–æ—Å—Ç–∏.\n\n"
        message += "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –®–∫–∞–ª—ã –ü–ê –∏ –ù–ê –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã. –ß–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –≤—ã—Å–æ–∫–∏–µ –∏–ª–∏ –Ω–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –æ–±–µ–∏–º —à–∫–∞–ª–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.*"

        return message

    def responses_to_json(self, responses: Dict[int, int]) -> str:
        """Converts responses dictionary to a JSON string."""
        return json.dumps(responses)

if __name__ == '__main__':
    scorer = PanasScorer()
    # Mock responses (20 answers, 1-5)
    mock_responses = {
        1: 5, 2: 1, 3: 1, 4: 4, 5: 5, 6: 1, 7: 1, 8: 2, 9: 4, 10: 5,
        11: 4, 12: 1, 13: 1, 14: 3, 15: 2, 16: 1, 17: 5, 18: 4, 19: 5, 20: 1
    }
    
    calculated_scores = scorer.calculate_scores(mock_responses)
    print("\nCalculated Scores Data (PANAS):")
    print(json.dumps(calculated_scores, indent=2, ensure_ascii=False))

    if "error" not in calculated_scores:
        results_message = scorer.format_panas_results_message(calculated_scores, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print("\nFormatted PANAS Results Message:")
        print(results_message)
    else:
        print(f"Error: {calculated_scores['error']}")

    # Test case with Q14 included in PA (hypothetical)
    # class PanasScorerQ14(PanasScorer):
    #     PA_ITEMS = [1, 4, 5, 9, 10, 11, 14, 17, 18, 19] # Add 14
    # scorer_q14 = PanasScorerQ14()
    # calculated_scores_q14 = scorer_q14.calculate_scores(mock_responses)
    # print("\nCalculated Scores Data (PANAS with Q14 in PA):")
    # print(json.dumps(calculated_scores_q14, indent=2, ensure_ascii=False))
    # results_message_q14 = scorer_q14.format_panas_results_message(calculated_scores_q14, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Q14")
    # print("\nFormatted PANAS Results Message (with Q14 in PA):")
    # print(results_message_q14) 