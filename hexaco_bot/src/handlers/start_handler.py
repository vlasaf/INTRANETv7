"""
Start command and basic message handlers for HEXACO bot.
"""

import logging
from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, CallbackQuery
from hexaco_bot.src.data.database import DatabaseManager
from hexaco_bot.src.session.session_manager import SessionManager
from hexaco_bot.src.scoring.hexaco_scorer import HEXACOScorer

logger = logging.getLogger(__name__)

# States
STATE_GENDER_SELECTION = 'gender_selection'
STATE_NAME_INPUT = 'name_input'
STATE_AWAIT_PAEI = 'awaiting_paei'
STATE_AWAIT_MBTI = 'awaiting_mbti'
STATE_INITIAL_SETUP_COMPLETE = 'initial_setup_complete'


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ PAEI –∫–æ–¥—ã
def _generate_valid_paei_codes():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ PAEI –∫–æ–¥—ã."""
    valid_codes = []
    # –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±—É–∫–≤–æ–π (–∑–∞–≥–ª–∞–≤–Ω–æ–π –∏–ª–∏ —Å—Ç—Ä–æ—á–Ω–æ–π), –ª–∏–±–æ –¥–µ—Ñ–∏—Å–æ–º
    for p in ['P', 'p', '-']:
        for a in ['A', 'a', '-']:
            for e in ['E', 'e', '-']:
                for i in ['I', 'i', '-']:
                    valid_codes.append(f"{p}{a}{e}{i}")
    return sorted(valid_codes)

_VALID_PAEI_CODES = _generate_valid_paei_codes()

MBTI_TYPES = [
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä ‚Äî INTJ-A / INTJ-T", "–õ–æ–≥–∏–∫ ‚Äî INTP-A / INTP-T",
    "–ö–æ–º–∞–Ω–¥–∏—Ä ‚Äî ENTJ-A / ENTJ-T", "–ü–æ–ª–µ–º–∏—Å—Ç ‚Äî ENTP-A / ENTP-T",
    "–ó–∞—Å—Ç—É–ø–Ω–∏–∫ ‚Äî INFJ-A / INFJ-T", "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫ ‚Äî INFP-A / INFP-T",
    "–ü—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç ‚Äî ENFJ-A / ENFJ-T", "–ê–∫—Ç–∏–≤–∏—Å—Ç ‚Äî ENFP-A / ENFP-T",
    "–õ–æ–≥–∏—Å—Ç ‚Äî ISTJ-A / ISTJ-T", "–ó–∞—â–∏—Ç–Ω–∏–∫ ‚Äî ISFJ-A / ISFJ-T",
    "–ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî ESTJ-A / ESTJ-T", "–ö–æ–Ω—Å—É–ª ‚Äî ESFJ-A / ESFJ-T",
    "–í–∏—Ä—Ç—É–æ–∑ ‚Äî ISTP-A / ISTP-T", "–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç ‚Äî ISFP-A / ISFP-T",
    "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å ‚Äî ESTP-A / ESTP-T", "–ê—Ä—Ç–∏—Å—Ç ‚Äî ESFP-A / ESFP-T"
]

class StartHandler:
    """Handles /start command and user registration flow."""
    
    def __init__(self, bot: TeleBot, db: DatabaseManager, session_manager: SessionManager):
        self.bot = bot
        self.db = db
        self.session_manager = session_manager

    def _safe_answer_callback_query(self, call_id: str, text: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        try:
            self.bot.answer_callback_query(call_id, text)
            return True
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback
            logger.warning(f"Failed to answer callback query {call_id}: {e}")
            return False
    
    def handle_start_command(self, message: Message):
        """Handle /start command."""
        user_id = message.from_user.id
        username = message.from_user.username
        
        logger.info(f"Start command from user {user_id} (@{username})")
        
        # Check if user already exists
        existing_user = self.db.get_user(user_id)
        if existing_user:
            self._send_welcome_back_message(message, existing_user)
        else:
            self._send_welcome_new_user(message)
    
    def _send_welcome_new_user(self, message: Message):
        """Send welcome message to new user."""
        welcome_text = """
ÔøΩÔøΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏!

–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ —Å–µ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤.
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:
        """
        
        # Create gender selection keyboard
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π"))
        
        self.bot.send_message(message.chat.id, welcome_text, reply_markup=keyboard)
        
        # Update session state
        self.session_manager.get_or_create_session(message.from_user.id)
        self.session_manager.update_session_state(message.from_user.id, STATE_GENDER_SELECTION)
    
    def _send_welcome_back_message(self, message: Message, user_data: dict):
        """Send welcome back message to existing user."""
        name = f"{user_data['first_name']} {user_data['last_name']}"
        
        # Check if PAEI and MBTI are filled
        if not user_data.get('paei_index'):
            logger.info(f"User {message.from_user.id} exists but PAEI is missing. Requesting PAEI.")
            self.ask_paei_index(message)
            return
        if not user_data.get('mbti_type'):
            logger.info(f"User {message.from_user.id} exists but MBTI is missing. Requesting MBTI.")
            self.ask_mbti_type(message) # Assumes PAEI is present if we reach here
            return
        
        welcome_back_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!

–í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å—é –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Å—Ç–∞–º –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ /start –∏–ª–∏ /test - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)
‚Ä¢ /results - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
        """
        self.bot.send_message(message.chat.id, welcome_back_text)
        # Ensure session state is cleared or set to a menu state
        session = self.session_manager.get_or_create_session(message.from_user.id)
        self.session_manager.update_session_state(session.user_id, STATE_INITIAL_SETUP_COMPLETE)
    
    def handle_help_command(self, message: Message):
        """Handle /help command."""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ HEXACO –¢–µ—Å—Ç—É

üéØ –û —Ç–µ—Å—Ç–µ:
HEXACO - —ç—Ç–æ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏, –∏–∑–º–µ—Ä—è—é—â–∞—è 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

üìù –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å:
1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Å—Ç–Ω–æ
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∫–∞–ª—É –æ—Ç 1 –¥–æ 5:
   1 - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω
   2 - –ù–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω  
   3 - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –Ω–µ—Ç –º–Ω–µ–Ω–∏—è
   4 - –ù–µ–º–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–µ–Ω
   5 - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–æ–≥–ª–∞—Å–µ–Ω

‚è±Ô∏è –í—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç
üîÑ –ú–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º 6 —Ñ–∞–∫—Ç–æ—Ä–∞–º.

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        """
        
        self.bot.send_message(message.chat.id, help_text)
    
    def handle_default_message(self, message: Message):
        """Handle all other messages based on session state."""
        user_id = message.from_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            # No active session, suggest starting
            # Check if user exists, if so, maybe they just need to start the PAEI/MBTI flow
            user = self.db.get_user(user_id)
            if user and (not user.get('paei_index') or not user.get('mbti_type')):
                 # This case might be rare if /start handles it, but as a fallback:
                self.bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            else:
                self.bot.send_message(
                message.chat.id,
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        # Handle message based on current state
        if session.state == STATE_GENDER_SELECTION:
            self._handle_gender_selection(message, session)
        elif session.state == STATE_NAME_INPUT:
            self._handle_name_input(message, session)
        elif session.state == STATE_AWAIT_PAEI:
            self._handle_paei_input(message, session)
        else:
            # Default response for states not handled here (e.g., awaiting_mbti is handled by callback)
            # or if state is something like initial_setup_complete
            if session.state not in [STATE_AWAIT_MBTI, STATE_INITIAL_SETUP_COMPLETE, None, 'start']: # None and 'start' are possible initial states
                self.bot.send_message(
                message.chat.id,
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
    
    def _handle_gender_selection(self, message: Message, session):
        """Handle gender selection."""
        text = message.text.lower()
        
        if "–º—É–∂—Å–∫–æ–π" in text or "üë®" in text:
            gender = "male"
        elif "–∂–µ–Ω—Å–∫–∏–π" in text or "üë©" in text:
            gender = "female"
        else:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=self._get_gender_keyboard()
            )
            return
        
        # Save gender to temp data
        self.session_manager.update_session_state(
            session.user_id, 
            STATE_NAME_INPUT, 
            {'gender': gender}
        )
        
        # Ask for name
        self.bot.send_message(
            message.chat.id,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            reply_markup=self._get_remove_keyboard()
        )
    
    def _handle_name_input(self, message: Message, session):
        """Handle name input, then proceed to PAEI."""
        name_parts = message.text.strip().split()
        
        if len(name_parts) < 2:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\\n\\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
            )
            return
        
        first_name = name_parts[0]
        last_name = " ".join(name_parts[1:])
        
        user_id = session.user_id
        username = message.from_user.username
        gender = session.temp_data.get('gender')
        
        if self.db.create_user(user_id, username, first_name, last_name, gender):
            logger.info(f"User {user_id} created/updated with name and gender.")
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ò–º—è: {first_name} {last_name}\n–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}"
            )
            self.ask_paei_index(message) # Proceed to PAEI
            
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def ask_paei_index(self, message: Message):
        """Ask the user for their PAEI index."""
        user_id = message.from_user.id
        logger.info(f"Asking PAEI index for user {user_id}")

        paei_prompt = """
–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à PAEI-–∏–Ω–¥–µ–∫—Å.
PAEI-–∏–Ω–¥–µ–∫—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à —Å—Ç–∏–ª—å –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –ø–æ –ê–¥–∏–∑–µ—Å—É (Producer, Administrator, Entrepreneur, Integrator).

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω–¥–µ–∫—Å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. 
–ë—É–∫–≤—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–º–∏. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –¥–µ—Ñ–∏—Å–æ–º (-).

–ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
PAEI, PaEi, PAe-, P-E-, p---, ----

–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: https://paei.denero.ru/

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à PAEI-–∏–Ω–¥–µ–∫—Å:
        """
        self.bot.send_message(message.chat.id, paei_prompt, reply_markup=self._get_remove_keyboard())
        self.session_manager.update_session_state(user_id, STATE_AWAIT_PAEI)

    def _handle_paei_input(self, message: Message, session):
        """Handle PAEI index input from user."""
        user_id = message.from_user.id
        paei_input = message.text.strip()  # –£–±–∏—Ä–∞–µ–º .upper() —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if paei_input in _VALID_PAEI_CODES:
            if self.db.update_user_paei(user_id, paei_input):
                logger.info(f"PAEI index '{paei_input}' saved for user {user_id}")
                self.bot.send_message(message.chat.id, f"‚úÖ –í–∞—à PAEI-–∏–Ω–¥–µ–∫—Å '{paei_input}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                self.ask_mbti_type(message) # Proceed to MBTI
            else:
                logger.error(f"Failed to save PAEI index for user {user_id}")
                self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ PAEI-–∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑.")
                # self.ask_paei_index(message) # Re-ask
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        corrected_input = self._try_autocorrect_paei(paei_input)
        if corrected_input and corrected_input in _VALID_PAEI_CODES:
            logger.info(f"Auto-corrected PAEI '{paei_input}' -> '{corrected_input}' for user {user_id}")
            if self.db.update_user_paei(user_id, corrected_input):
                self.bot.send_message(message.chat.id, 
                    f"‚úÖ –í–∞—à PAEI-–∏–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å '{paei_input}' –Ω–∞ '{corrected_input}' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                self.ask_mbti_type(message) # Proceed to MBTI
            else:
                logger.error(f"Failed to save corrected PAEI index for user {user_id}")
                self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ PAEI-–∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑.")
            return

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        logger.warning(f"Invalid PAEI index '{paei_input}' from user {user_id}")
        error_details = self._analyze_paei_error(paei_input)
        invalid_paei_message = f"""
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PAEI-–∏–Ω–¥–µ–∫—Å–∞: '{paei_input}'

{error_details}

–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª - —ç—Ç–æ P, A, E, I –∏–ª–∏ –¥–µ—Ñ–∏—Å (-).
–†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ–≤–∞–∂–µ–Ω.

–ü—Ä–∏–º–µ—Ä—ã: PAEI, pAe-, --EI, ----, paeI

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ - —ç—Ç–æ I (–∫–∞–∫ "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä"), –Ω–µ L!
–ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à PAEI-–∏–Ω–¥–µ–∫—Å –µ—â–µ —Ä–∞–∑:
        """
        self.bot.send_message(message.chat.id, invalid_paei_message)
        # State remains STATE_AWAIT_PAEI

    def _try_autocorrect_paei(self, paei_input: str) -> str:
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ PAEI –∏–Ω–¥–µ–∫—Å–µ."""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω–µ
        cleaned = paei_input.strip()
        
        # –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        corrections = {
            'PAEL': 'PAEI',
            'pael': 'paei',
            'PaEL': 'PaEI',
            'paEL': 'paEI',
            'PAIL': 'PAEI',
            'pail': 'paei',
        }
        
        # –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞
        if cleaned in corrections:
            return corrections[cleaned]
        
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è (4 —Å–∏–º–≤–æ–ª–∞), –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if len(cleaned) == 4:
            corrected = []
            valid_chars = [['P', 'p', '-'], ['A', 'a', '-'], ['E', 'e', '-'], ['I', 'i', '-']]
            
            for i, char in enumerate(cleaned):
                if char in valid_chars[i]:
                    corrected.append(char)
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
                    if i == 0 and char.upper() == 'P':
                        corrected.append('P' if char.isupper() else 'p')
                    elif i == 1 and char.upper() == 'A':
                        corrected.append('A' if char.isupper() else 'a')
                    elif i == 2 and char.upper() == 'E':
                        corrected.append('E' if char.isupper() else 'e')
                    elif i == 3 and char.upper() == 'I':
                        corrected.append('I' if char.isupper() else 'i')
                    elif i == 3 and char.upper() == 'L':  # L -> I (—Ç–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞)
                        corrected.append('I' if char.isupper() else 'i')
                    else:
                        return None  # –ù–µ –º–æ–∂–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            
            return ''.join(corrected)
        
        return None

    def _analyze_paei_error(self, paei_input: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ PAEI –∏–Ω–¥–µ–∫—Å–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É."""
        cleaned = paei_input.strip()
        
        if len(cleaned) == 0:
            return "‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–Ω–¥–µ–∫—Å."
        
        if len(cleaned) < 4:
            return f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω–¥–µ–∫—Å ({len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤ –≤–º–µ—Å—Ç–æ 4)."
        
        if len(cleaned) > 4:
            return f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å ({len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤ –≤–º–µ—Å—Ç–æ 4)."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        errors = []
        positions = ['–ø–µ—Ä–≤–∞—è (P)', '–≤—Ç–æ—Ä–∞—è (A)', '—Ç—Ä–µ—Ç—å—è (E)', '—á–µ—Ç–≤–µ—Ä—Ç–∞—è (I)']
        valid_chars = [['P', 'p', '-'], ['A', 'a', '-'], ['E', 'e', '-'], ['I', 'i', '-']]
        
        for i, char in enumerate(cleaned):
            if char not in valid_chars[i]:
                if i == 3 and char.upper() == 'L':
                    errors.append(f"‚ö†Ô∏è {positions[i]} –ø–æ–∑–∏—Ü–∏—è: '{char}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'I' –∏–ª–∏ 'i' (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É 'I'?)")
                else:
                    expected = ', '.join(valid_chars[i])
                    errors.append(f"‚ö†Ô∏è {positions[i]} –ø–æ–∑–∏—Ü–∏—è: '{char}' –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª. –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")
        
        if errors:
            return '\n'.join(errors)
        
        return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ."

    def ask_mbti_type(self, message: Message):
        """Ask the user for their 16Personalities type using inline buttons."""
        user_id = message.from_user.id
        logger.info(f"Asking MBTI type for user {user_id}")

        mbti_prompt = """
–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 16Personalities (–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ MBTI).
–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.16personalities.com

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:
        """
        
        keyboard = InlineKeyboardMarkup(row_width=2) # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        buttons = [InlineKeyboardButton(text=mbti_type, callback_data=mbti_type) for mbti_type in MBTI_TYPES]
        keyboard.add(*buttons)
        
        self.bot.send_message(message.chat.id, mbti_prompt, reply_markup=keyboard)
        self.session_manager.update_session_state(user_id, STATE_AWAIT_MBTI)

    def handle_mbti_callback(self, call: CallbackQuery, question_handler_show_test_menu_func): # call is telebot.types.CallbackQuery
        """Handles the MBTI type selection from inline keyboard."""
        user_id = call.from_user.id
        mbti_type = call.data # This is the full string like "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä ‚Äî INTJ-A / INTJ-T"
        
        logger.info(f"MBTI type selected by user {user_id}: {mbti_type}")

        if self.db.update_user_mbti(user_id, mbti_type):
            self._safe_answer_callback_query(call.id, f"–¢–∏–ø {mbti_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚úÖ –í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ '{mbti_type}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
            ) # Remove keyboard by not passing reply_markup
            
            self.session_manager.update_session_state(user_id, STATE_INITIAL_SETUP_COMPLETE)
            logger.info(f"Initial setup complete for user {user_id}. Proceeding to test menu.")
            
            # Pass the CallbackQuery object itself to show_test_menu
            question_handler_show_test_menu_func(call) 
            
        else:
            logger.error(f"Failed to save MBTI type for user {user_id}")
            self._safe_answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            self.bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # Potentially re-ask or direct to /start
            # self.ask_mbti_type(call.message) # This would re-send the button prompt
    
    def _get_gender_keyboard(self):
        """Get gender selection keyboard."""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π"))
        return keyboard
    
    def _get_remove_keyboard(self):
        """Get keyboard removal markup."""
        return ReplyKeyboardRemove() 