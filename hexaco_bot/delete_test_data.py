#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python delete_test_data.py <user_id> <test_name>
"""

import sqlite3
import sys
import os
from datetime import datetime

def delete_test_data(user_id, test_name):
    """
    –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã results
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        test_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ (hexaco, cdrisc, pid5bfm, panas, rfq, sds, self_efficacy, svs, urica, dweck)
    """
    db_path = "data/hexaco_bot.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ results
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='results'")
        if not cursor.fetchone():
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        cursor.execute("SELECT result_id, created_at FROM results WHERE user_id = ? AND test_type = ?", (user_id, test_name))
        test_records = cursor.fetchall()
        
        if not test_records:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(test_records)} –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–∞ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        for result_id, created_at in test_records:
            print(f"  üìã ID: {result_id}, –î–∞—Ç–∞: {created_at}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if len(sys.argv) < 4 or sys.argv[3] != "--force":
            confirm = input("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ? (y/N): ")
            if confirm.lower() not in ['y', 'yes', '–¥–∞']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM results WHERE user_id = ? AND test_type = ?", (user_id, test_name))
        deleted_count = cursor.rowcount
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT COUNT(*) FROM results WHERE user_id = ? AND test_type = ?", (user_id, test_name))
        count_after = cursor.fetchone()[0]
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–∞ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {count_after}")
        
        if count_after == 0:
            print(f"üéØ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç {test_name} –∑–∞–Ω–æ–≤–æ")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        conn.close()

def show_user_tests(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db_path = "data/hexaco_bot.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT test_type, COUNT(*) as count, MAX(created_at) as last_date FROM results WHERE user_id = ? GROUP BY test_type ORDER BY test_type", (user_id,))
        user_tests = cursor.fetchall()
        
        if not user_tests:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüìä –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        print("-" * 60)
        print(f"{'–¢–µ—Å—Ç':<15} {'–ó–∞–ø–∏—Å–µ–π':<8} {'–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞':<20} {'–°—Ç–∞—Ç—É—Å':<10}")
        print("-" * 60)
        
        for test_type, count, last_date in user_tests:
            status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if count > 0 else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
            last_date_str = last_date if last_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            print(f"{test_type:<15} {count:<8} {last_date_str:<20} {status:<10}")
        
        print(f"\nüìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(user_tests)}")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def show_test_details(user_id, test_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    db_path = "data/hexaco_bot.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT result_id, created_at, scores_json FROM results WHERE user_id = ? AND test_type = ?", (user_id, test_name))
        records = cursor.fetchall()
        
        if not records:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüîç –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        print("-" * 60)
        
        for result_id, created_at, scores_json in records:
            print(f"üìã ID –∑–∞–ø–∏—Å–∏: {result_id}")
            print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
            if scores_json:
                print(f"üìä –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ–≤: {len(scores_json)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("-" * 30)
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "data/hexaco_bot.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"data/hexaco_bot_backup_{timestamp}.db"
    
    try:
        conn = sqlite3.connect(db_path)
        backup_conn = sqlite3.connect(backup_path)
        conn.backup(backup_conn)
        backup_conn.close()
        conn.close()
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    if len(sys.argv) < 2:
        print("üîß –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python delete_test_data.py <user_id> <test_name> [--force]")
        print("  python delete_test_data.py --show <user_id>")
        print("  python delete_test_data.py --details <user_id> <test_name>")
        print("  python delete_test_data.py --backup")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print("  hexaco, cdrisc, pid5bfm, panas, rfq, sds, self_efficacy, svs, urica, dweck")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python delete_test_data.py 456355303 pid5bfm")
        print("  python delete_test_data.py --show 456355303")
        print("  python delete_test_data.py --details 456355303 pid5bfm")
        print("  python delete_test_data.py --backup")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if sys.argv[1] == "--show":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id")
            sys.exit(1)
        try:
            user_id = int(sys.argv[2])
            show_user_tests(user_id)
        except ValueError:
            print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            sys.exit(1)
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞
    if sys.argv[1] == "--details":
        if len(sys.argv) < 4:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id –∏ test_name")
            sys.exit(1)
        try:
            user_id = int(sys.argv[2])
            test_name = sys.argv[3].lower()
            show_test_details(user_id, test_name)
        except ValueError:
            print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            sys.exit(1)
        return
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if sys.argv[1] == "--backup":
        backup_database()
        return
    
    # –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    if len(sys.argv) < 3:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id –∏ test_name")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
    except ValueError:
        print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)
    
    test_name = sys.argv[2].lower()
    
    valid_tests = ["hexaco", "cdrisc", "pid5bfm", "panas", "rfq", "sds", "self_efficacy", "svs", "urica", "dweck"]
    if test_name not in valid_tests:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_tests)}")
        sys.exit(1)
    
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if len(sys.argv) < 4 or sys.argv[3] != "--force":
        backup_choice = input("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º? (Y/n): ")
        if backup_choice.lower() not in ['n', 'no', '–Ω–µ—Ç']:
            backup_database()
    
    success = delete_test_data(user_id, test_name)
    
    if success:
        print(f"\nüéØ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç {test_name} –∑–∞–Ω–æ–≤–æ")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ {test_name}")

if __name__ == "__main__":
    main() 